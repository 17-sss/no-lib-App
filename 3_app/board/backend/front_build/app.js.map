{"version":3,"file":"app.js","mappings":"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","sources":["webpack://frontend/./src/core/CustomError/index.ts","webpack://frontend/./src/core/PubSub/classes/Publisher.ts","webpack://frontend/./src/utils/functions/localStorage.ts","webpack://frontend/./src/utils/functions/dataFetching.ts","webpack://frontend/./src/core/PubSub/mainPublisher.ts","webpack://frontend/./src/utils/functions/normal.ts","webpack://frontend/./src/core/PubSub/editPublisher.ts","webpack://frontend/./src/core/Component/functions.ts","webpack://frontend/./src/core/Component/vdom.ts","webpack://frontend/./src/core/Component/index.ts","webpack://frontend/./src/core/PubSub/classes/Subscriber.ts","webpack://frontend/./src/components/Board/index.ts","webpack://frontend/./src/components/Button/index.ts","webpack://frontend/./src/components/Input/index.ts","webpack://frontend/./src/components/Pagination/index.ts","webpack://frontend/./src/components/SelectBox/index.ts","webpack://frontend/./src/components/Span/index.ts","webpack://frontend/./src/components/Textarea/index.ts","webpack://frontend/./src/compositions/Modal/index.ts","webpack://frontend/./src/compositions/DetailPageBottomBar/index.ts","webpack://frontend/./src/utils/types.ts","webpack://frontend/./src/compositions/DetailPageContent/index.ts","webpack://frontend/./src/compositions/EditPageBottomBar/index.ts","webpack://frontend/./src/compositions/EditPageContent/index.ts","webpack://frontend/./src/compositions/MainPageTopBar/index.ts","webpack://frontend/./src/compositions/MainPageBoard/index.ts","webpack://frontend/./src/pages/DetailPage/index.ts","webpack://frontend/./src/pages/EditPage/index.ts","webpack://frontend/./src/pages/MainPage/index.ts","webpack://frontend/./src/pages/NotFoundPage/index.ts","webpack://frontend/./src/core/Router/functions.ts","webpack://frontend/./src/core/RouterLink/index.ts","webpack://frontend/./src/index.ts","webpack://frontend/./src/App.ts","webpack://frontend/./src/core/Router/index.ts"],"sourcesContent":["/**\n * [CustomError]\n */\n\ntype ErrorMessageName = \"NOT_FOUND_TARGET\" | \"NOT_FOUND_ROUTER_INFO\" | \"RESPONSE_IS_NULL\";\ntype ErrorMessageType = {\n  [name in ErrorMessageName]: string;\n};\nconst errorMessage: ErrorMessageType = {\n  NOT_FOUND_TARGET: `지정하려는 타켓을 찾을 수 없습니다.`,\n  NOT_FOUND_ROUTER_INFO: `페이지 정보를 담고 있는 RouterInfo를 불러올 수 없습니다.`,\n  RESPONSE_IS_NULL: `서버에서 요청에 대한 응답 값을 가져올 수 없습니다.`,\n};\n\ninterface CustomErrorParams {\n  msgType?: ErrorMessageName;\n  name?: string;\n  customMessage?: string;\n}\n\nclass CustomError extends Error {\n  constructor({ msgType, customMessage = \"\", name = \"\" }: CustomErrorParams) {\n    super(`${name && `[${name}] `}${customMessage || (msgType && `${errorMessage[msgType]}`) || \"\"}`);\n  }\n}\n\nexport default CustomError;\n","interface RecentChangedKeys<S> {\n  prevKeys: (keyof S)[];\n  currKeys: (keyof S)[];\n  largeKeySet: Set<keyof S>;\n}\n\n/**\n * [Publisher]\n */\nclass Publisher<S = any> {\n  private _state: S;\n  private _prevState: S;\n  private _notExec: boolean = false;\n\n  private _recentChangedKeys: RecentChangedKeys<S> = { prevKeys: [], currKeys: [], largeKeySet: new Set() };\n  private readonly _observers: Set<Function> = new Set();\n\n  constructor(initState: S, private readonly setStateCallback?: () => void) {\n    this._state = initState;\n    this._prevState = initState;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get recentChangedKeys() {\n    return this._recentChangedKeys;\n  }\n\n  private set state(newState: S) {\n    this._state = { ...newState };\n    this.setStateCallback && this.setStateCallback();\n    this.updateRecentChangedKeys();\n\n    if (this._notExec) this._notExec = false;\n    else this.exec();\n  }\n\n  setState(newState: S, options?: { notExec?: boolean }): void {\n    if (options && typeof options.notExec !== \"undefined\") this._notExec = options.notExec;\n    this._prevState = { ...this._state };\n    this.state = { ...this._state, ...newState }; // setter state에서 확정\n  }\n\n  /**\n   * 🧚🏻 exec\n   * - 이 Publisher에 등록된 함수 실행 (Subscriber들의 func)\n   */\n  exec(): void {\n    this._observers.forEach((func: Function) => func());\n  }\n\n  /**\n   * 🧚🏻 add\n   * - 이 Publisher에 함수 등록 (Subscriber의 func)\n   */\n  add(func: Function): void {\n    this._observers.add(func);\n  }\n\n  /**\n   * 🧚🏻 clear\n   * - 이 Publisher에 등록된 함수 제거 (단일)\n   */\n  remove(func: Function): void {\n    this._observers.delete(func);\n  }\n\n  /**\n   * 🧚🏻 clear\n   * - 이 Publisher에 등록된 함수 제거 (모두)\n   */\n  clear(): void {\n    this._observers.clear();\n  }\n\n  /**\n   * 🧚🏻 clearLargeKeySet\n   * - this._recentChangedKeys.largeKeySet 초기화\n   */\n  clearLargeKeySet() {\n    this._recentChangedKeys.largeKeySet.clear();\n  }\n\n  /**\n   * 👾 updateRecentChangedKeys\n   * - this._recentChangedKeys 업데이트\n   */\n  private updateRecentChangedKeys(): void {\n    const isInitPublisherState = Object.values(this._recentChangedKeys).every((arrValue) => !arrValue.length);\n\n    if (!isInitPublisherState) this._recentChangedKeys.prevKeys = [...this._recentChangedKeys.currKeys];\n    this._recentChangedKeys.currKeys = this.getRecentKeys() ?? [];\n\n    const { largeKeySet, currKeys } = this._recentChangedKeys;\n    const keyList = [...largeKeySet, ...currKeys];\n    keyList.forEach((v) => this._recentChangedKeys.largeKeySet.add(v));\n  }\n\n  /**\n   * 👾 getRecentKeys\n   * - 최근에 Publisher의 state에서 변경된 key들 반환\n   */\n  private getRecentKeys(): (keyof S)[] | null {\n    if (!this._state || !this._prevState) return null;\n    const arrState = Object.entries(this._state);\n    const arrPrevState = Object.entries(this._prevState);\n\n    const result = [];\n\n    for (let i = 0; i < arrState.length; i++) {\n      const [key, value] = arrState[i];\n      const [prevKey, prevValue] = arrPrevState[i];\n      const isDiff = key === prevKey && JSON.stringify(value) !== JSON.stringify(prevValue);\n      if (isDiff) result.push(key as keyof S);\n    }\n\n    return result;\n  }\n}\n\nexport default Publisher;\n","// 기본\nexport const setLocalItem = (key: string, value: string): void => localStorage.setItem(key, value);\nexport const getLocalItem = (key: string) => localStorage.getItem(key);\nexport const removeLocalItem = (key: string): void => localStorage.removeItem(key);\nexport const clearLocalStorage = (): void => localStorage.clear();\n\n// ----\n\n// 활용\nexport function getParseLocalItem<T>(key: string) {\n  const strItem = getLocalItem(key);\n  if (!strItem) return null;\n  return JSON.parse(strItem) as T;\n}\nexport function setConvertLocalItem(key: string, value: any): void {\n  return setLocalItem(key, JSON.stringify(value));\n}\nexport function addLocalItem(key: string, initValue: any) : void {\n  if (getParseLocalItem(key)) return;\n  setConvertLocalItem(key, initValue);\n}\n","import { PostData, ResponseDataType } from \"@common/types\";\nimport { CustomError } from \"@src/core\";\n\ntype RequestPathTypes = \"getPost\" | \"write\" | \"edit\" | \"delete\";\ninterface ExecFetchProps {\n  type: RequestPathTypes;\n  options?: Pick<RequestInit, \"body\" | \"method\" | \"headers\"> & { id?: number };\n}\n\nconst createEndPoint = () => {\n  const isDevMode = process.env.NODE_ENV === \"development\";\n  const PORT = isDevMode ? 3000 : 4000;\n  return `http://localhost:${PORT}/api`;\n};\n\nconst createURL = (type: RequestPathTypes, id?: number) => {\n  const END_POINT = createEndPoint();\n  const currType = type === \"getPost\" ? \"post\" : type;\n  if (typeof id !== \"undefined\" && type === \"getPost\") return `${END_POINT}/${currType}/${id}`;\n  return `${END_POINT}/${currType}`;\n};\n\n/** ✨ execFetch: fetch API 활용하여 서버에서 데이터를 가져옴  */\nexport async function execFetch<T = any>({ type, options }: ExecFetchProps = { type: \"getPost\" }): Promise<T | null> {\n  try {\n    const url = createURL(type, options?.id);\n    const res = await fetch(url, options);\n\n    const isOK = 200 <= res.status && res.status < 400;\n    if (!isOK) throw new Error(`[!] API : status - ${res.status}`);\n\n    const resData: T = await res.json();\n    return resData;\n  } catch (e) {\n    console.error((e as Error).message);\n    return null;\n  }\n}\n\n// ---------\n\ninterface GetAllPostReturnType {\n  message?: string;\n  data?: PostData[];\n}\n\n/** ✨ getAllPostData: 서버에서 모든 게시물 데이터를 가져와서 정렬 및 추가 작업 후 반환 */\nexport async function getAllPostData(customMessage?: string): Promise<GetAllPostReturnType> {\n  try {\n    const res = await execFetch<ResponseDataType<PostData[]>>();\n    if (!res || !res.data) throw new CustomError({ msgType: \"RESPONSE_IS_NULL\", customMessage });\n\n    const { data: arrPosts } = res;\n    arrPosts.forEach((post, i) => {\n      const { createdDate } = post;\n      if (!createdDate) return;\n      if (typeof createdDate === \"string\") arrPosts[i].createdDate = new Date(createdDate);\n    });\n    arrPosts.sort((a, b) => {\n      if (!a.id || !b.id) return 0;\n      return b.id - a.id;\n    });\n    return { data: arrPosts };\n  } catch (e) {\n    const { message } = e as unknown as Error;\n    console.error(e);\n    return { message };\n  }\n}\n","import { Publisher } from \".\";\nimport { PostData } from \"@common/types\";\nimport { getParseLocalItem, pipe, setConvertLocalItem } from \"@src/utils/functions\";\n\n// [1] mainPublisher 정의\nexport interface MainFilterOptions {\n  author: string;\n  searchWord: string;\n  isDesc?: boolean;\n  numPost: number;\n  pageNum: number;\n}\n\nexport interface MainPublisherState {\n  postData: PostData[]; // 👈 (주의) 무조건 서버에서 수정 / 삭제 / 조회할 때만 갱신하기!!\n  editId: number;\n  isInit: boolean;\n  isRefresh: boolean;\n\n  filterOptions: MainFilterOptions; // 👈 (참고) 요놈만 변경되어도 됨!\n  numPostList: number[];\n}\n\ntype InitMainPublisherState = Readonly<Omit<MainPublisherState, \"postData\">> & Pick<MainPublisherState, \"postData\">;\nexport const initMainState: InitMainPublisherState = {\n  postData: [],\n  editId: -1,\n  isInit: false,\n  isRefresh: false,\n\n  filterOptions: {\n    author: \"\",\n    searchWord: \"\",\n    isDesc: undefined,\n    numPost: 5,\n    pageNum: 1,\n  },\n  numPostList: [5, 10, 20, 30, 50, 100],\n};\n\nexport const LOCAL_MAIN_KEY = \"board_main\";\n\nfunction getLocalMainPublisherState(): MainPublisherState | null {\n  const state = getParseLocalItem<MainPublisherState>(LOCAL_MAIN_KEY);\n  if (!state) return null;\n  const arrPostData = state.postData;\n  arrPostData.forEach((data, i) => {\n    const { createdDate } = data;\n    if (!createdDate) return;\n    if (typeof createdDate === \"string\") state.postData[i].createdDate = new Date(createdDate);\n  });\n  return state;\n}\n\nconst setStateCallback = () => setConvertLocalItem(LOCAL_MAIN_KEY, mainPublisher.state);\nexport const mainPublisher: Publisher<MainPublisherState> = new Publisher(\n  getLocalMainPublisherState() ?? { ...initMainState },\n  setStateCallback\n);\n\n// ---------------------\n\n// [2] 게시물 필터링 함수 모음\n// - 게시글 목록 생성, (페이지 번호, 정렬, 작성자, 검색 등)이 변경되었을 때 사용될 함수들\n\ninterface CreatePostDataProps {\n  filterOptions: MainFilterOptions;\n  postData: PostData[];\n  isFullData?: boolean;\n}\n\n/** ✨ createPostData: 모든 필터 조건들을 활용하여 게시글 목록 생성 */\nexport function createPostData({ filterOptions, postData, isFullData }: CreatePostDataProps): PostData[] {\n  const { author, isDesc, numPost, pageNum, searchWord } = filterOptions;\n  const result = pipe<PostData[]>(\n    createAuthorFilterItems(author),\n    createSearchFilterItems(searchWord),\n    createDateSortItems(isDesc),\n    createNumPostItems(numPost, pageNum, isFullData)\n  )(postData);\n  return result;\n}\n\n// ===========\n\ntype CreatePostsRetrunType = (arrPostData: PostData[]) => PostData[];\n\n/** 선택된 작성자 기준으로 필터링하여 게시글 목록 생성 -- (1) */\nfunction createAuthorFilterItems(author: string): CreatePostsRetrunType {\n  return (arrPostData: PostData[]) => {\n    if (!author) return arrPostData;\n    const filterData = arrPostData.filter((v) => v.author === author);\n    return filterData;\n  };\n}\n/** 검색창에 입력된 검색어 기준으로 필터링하여 게시글 목록 생성 -- (2) */\nfunction createSearchFilterItems(searchWord: string): CreatePostsRetrunType {\n  return (arrPostData: PostData[]) => {\n    if (!searchWord) return arrPostData;\n    const replacedSearchword = searchWord.replace(/\\s+/g, \"\");\n    const filterData = arrPostData.filter(({ subject }) => {\n      if (subject === null) return;\n      return subject.replace(/\\s+/g, \"\").indexOf(replacedSearchword) > -1;\n    });\n    return filterData;\n  };\n}\n/** 작성일 클릭 시, 내림차 & 오름차순으로 정렬한 게시글 목록 생성 -- (3) */\nfunction createDateSortItems(isDesc?: boolean): CreatePostsRetrunType {\n  return (arrPostData: PostData[]) => {\n    if (typeof isDesc === \"undefined\") return arrPostData;\n    const sortData = [...arrPostData].sort((a, b) => {\n      if (a.createdDate === null || b.createdDate === null) return 0;\n      // 내림차\n      if (isDesc) return b.createdDate.valueOf() - a.createdDate.valueOf();\n      else return a.createdDate.valueOf() - b.createdDate.valueOf(); // 오름차\n    });\n    return sortData;\n  };\n}\n\n/** 보여질 게시글 수만큼 게시글 목록 생성 -- (4) */\nfunction createNumPostItems(numPost: number, pageNum: number, isFullData?: boolean): CreatePostsRetrunType {\n  return (arrPostData: PostData[]) => {\n    if (isFullData) return arrPostData;\n    const max = Math.ceil(arrPostData.length / numPost);\n    if (pageNum > max) pageNum = max;\n    const startIdx = (pageNum - 1) * numPost;\n    const endIdx = pageNum * numPost;\n    return arrPostData.slice(startIdx, endIdx);\n  };\n}\n","export function pipe<T>(...funcs: Function[]) {\n  return (data: T) => funcs.reduce((currData, func) => func(currData), data);\n}","import { initMainState, LOCAL_MAIN_KEY, MainPublisherState, Publisher } from \".\";\nimport { PostData } from \"@common/types\";\nimport { getParseLocalItem, removeLocalItem, setConvertLocalItem } from \"@src/utils/functions\";\n\nexport interface EditPublisherState {\n  editData: PostData;\n  isEdited: boolean;\n}\n\nexport const initEditState: Readonly<EditPublisherState> = {\n  editData: {\n    id: null,\n    subject: null,\n    author: null,\n    createdDate: null,\n    contents: null,\n  },\n  isEdited: false,\n};\n\nexport const LOCAL_EDIT_KEY = \"board_edit\";\n\nfunction isResetEditLocalState(): boolean {\n  const { pathname } = new URL(window.location.href);\n  const mainLocalState = getParseLocalItem<MainPublisherState>(LOCAL_MAIN_KEY);\n  const editId = mainLocalState?.editId;\n  const isNeedReset = !editId || editId === initMainState.editId || pathname !== \"/edit\";\n  if (isNeedReset) {\n    // window.history.pushState({ origin }, \"\", origin);\n    removeLocalItem(LOCAL_EDIT_KEY);\n  }\n  return isNeedReset;\n}\n\nfunction getLocalEditPublisherState(): EditPublisherState | null {\n  const isReset = isResetEditLocalState();\n  if (isReset) return null;\n\n  const state = getParseLocalItem<EditPublisherState>(LOCAL_EDIT_KEY);\n  if (!state) return null;\n  const { createdDate } = state.editData;\n  if (typeof createdDate === \"string\") state.editData.createdDate = new Date(createdDate);\n  return state;\n}\n\nconst setStateCallback = () => setConvertLocalItem(LOCAL_EDIT_KEY, editPublisher.state);\nexport const editPublisher: Publisher<EditPublisherState> = new Publisher(\n  getLocalEditPublisherState() ?? { ...initEditState },\n  setStateCallback\n);\n","const getRandomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport function makeComponentId(length: number = 16): string {\n  const [startCode, endCode] = [\"a\".charCodeAt(0), \"z\".charCodeAt(0)];\n  let result = \"\";\n  while (result.length < length) {\n    const isInNum = Boolean(Math.round(Math.random()));\n    if (isInNum) result += getRandomNumber(0, 9);\n    else result += String.fromCharCode(getRandomNumber(startCode, endCode));\n  }\n  return `__${result}`;\n}\n","/**\n * ✨ createNodes\n * - 주어진 Element의 childNodes 반환\n */\nexport function createNodes(originEle: Element | Node): Node[] {\n  return Array.from(originEle.childNodes);\n}\n\n/**\n * ✨ createTemplateNodes\n * - 임시 Element를 생성하여 innerHTML에 strTemplate를 대입 후 childNodes를 반환\n */\nexport function createTemplateNodes(strTemplate: string): Node[] {\n  const tempEle = document.createElement(\"div\");\n  tempEle.innerHTML = strTemplate;\n  return Array.from(tempEle.childNodes);\n}\n\n// ------\n\n/**\n * ✨ updateNodes\n * - 이전 Node들과 새로운 Node들을 비교하여 최신으로 업데이트\n */\nexport function updateNodes(\n  originEle: Element | Node,\n  prevNodes: Node[],\n  newNodes: Node[],\n  isNeedFixNodes?: boolean\n): void {\n  const MAX_LENGTH = Math.max(prevNodes.length, newNodes.length);\n  let idx = 0;\n\n  if (isNeedFixNodes) newNodes = fixedNewNodes(prevNodes, newNodes);\n\n  while (MAX_LENGTH > idx) {\n    const prevNode = prevNodes[idx];\n    const newNode = newNodes[idx];\n\n    // 1. 기본 비교\n    const isDfff = execDifferentCheck(originEle, prevNode, newNode);\n    if (isDfff) {\n      idx++;\n      continue;\n    }\n\n    // 2. 속성 비교\n    execAttributesCheck(prevNode, newNode);\n\n    // 3. 재귀\n    const prevChildren = createNodes(prevNode);\n    const newChildren = createNodes(newNode);\n    if (prevChildren.length || newChildren.length) updateNodes(prevNode, prevChildren, newChildren);\n    idx++;\n  }\n}\n\n/**\n * 👾 execDifferentCheck\n * - 이전 Node와 새로운 Node가 다를 때 모든 조건을 계산하고 업데이트\n *      - 이 함수가 마지막에 true를 반환했다면 attributes를 업데이트할 필요는 없음\n */\nfunction execDifferentCheck(originEle: Element | Node, prevNode: Node, newNode: Node) {\n  const isRemove = prevNode && !newNode;\n  const isAppend = !prevNode && newNode;\n\n  if (isRemove) originEle.removeChild(prevNode);\n  else if (isAppend) originEle.appendChild(newNode);\n  if (isRemove || isAppend) return true;\n\n  const isNotSameType = prevNode.nodeName !== newNode.nodeName;\n  const isTextType = [prevNode, newNode].every((node) => node instanceof Text);\n  const isDiffText = isTextType && prevNode.nodeValue !== newNode.nodeValue;\n\n  if (isNotSameType) originEle.replaceChild(newNode, prevNode);\n  else if (isDiffText) prevNode.nodeValue = newNode.nodeValue;\n  if (isNotSameType || isDiffText) return true;\n\n  return false;\n}\n\n/**\n * 👾 execAttributesCheck\n * - [!] 일반 Node 타입에서는 사용 불가.\n * - 이전 Element의 attributes를 새로운 Element의 attributes를 기준으로 업데이트\n *      - 업데이트 후, 새로운 Element에 없는 속성이라면 제거.\n */\nfunction execAttributesCheck(prevNode: Node | Element, newNode: Node | Element) {\n  if (!(prevNode instanceof Element) || !(newNode instanceof Element)) return;\n\n  const newAttrs = Array.from(newNode.attributes);\n  const prevAttrs = Array.from(prevNode.attributes);\n  newAttrs.forEach(\n    ({ name, value }) =>\n      prevAttrs.find(({ name: prevName, value: prevValue }) => name === prevName && value === prevValue) ??\n      prevNode.setAttribute(name, value)\n  );\n  prevAttrs.forEach(\n    ({ name }) => newAttrs.find(({ name: newName }) => newName === name) ?? prevNode.removeAttribute(name)\n  );\n}\n\n/**\n * 👾 fixedNewNodes\n * - Compoennt에서 isKeepAdding에 의해 _renderState 변경 시 newNodes만 비교하여 업데이트하면 안됨.\n *    - prevNodes에는 다른 컴포넌트들에 의해 추가된 Element들이 있음.\n * - 주어진 prevNodes, newNodes를 활용하여 새로운 node들을 만들어내는 함수\n *   - prevNodes를 복제 후, newNodes의 요소를 추가하여 새로운 node들을 반환.\n */\nfunction fixedNewNodes(prevNodes: Node[], newNodes: Node[]): Node[] {\n  const result = [...prevNodes];\n  newNodes.forEach((newNode) => {\n    const idx = prevNodes.findIndex((prevNode) => {\n      const isSameNodeName = newNode.nodeName === prevNode.nodeName;\n      const isAllElement = prevNode instanceof HTMLElement && newNode instanceof HTMLElement;\n      if (!isAllElement) return;\n      const prevId = prevNode.dataset.componentId;\n      const newId = newNode.dataset.componentId;\n      const isSameId = prevId === newId;\n\n      return isSameNodeName && isAllElement && isSameId;\n    });\n    if (idx === -1) return;\n    result[idx] = newNode;\n  });\n  return result;\n}\n","import CustomError from \"../CustomError\";\nimport { Publisher, Subscriber } from \"../PubSub\";\nimport { makeComponentId } from \"./functions\";\nimport { createNodes, createTemplateNodes, updateNodes } from \"./vdom\";\n\nexport type TargetType = Element | string | null;\nexport interface ComponentConstructor<P extends Props = {}> {\n  new ($target: TargetType, props?: P): Component;\n}\n\nexport interface ComponentItemType<P extends Props = {}> {\n  Component: ComponentConstructor<P>;\n  $target?: TargetType;\n  props?: P;\n}\n\nconst defaultPropsKeys = [\"isNotKeepAdding\", \"initInsertPosition\"] as const;\ninterface DefaultProps {\n  isNotKeepAdding?: boolean;\n  initInsertPosition?: InsertPosition;\n}\nexport type Props<P = {}> = P & DefaultProps;\n\nexport interface SetStateOptions {\n  noRender?: boolean;\n  isSetEvents?: boolean;\n}\n\ntype RenderState = \"default\" | \"adding\" | \"done\" | \"disabled\";\n\n/**\n * [Component]\n * - 모든 컴포넌트(일반, page, Link)의 부모가 되는 class\n * - 생성 시 동작 과정: constructor -> init -> render -> setTemplate -> setChildren -> setEvents\n */\nclass Component<S = {}, P extends Props = DefaultProps> {\n  private _state: S | undefined;\n  private _renderState: RenderState = \"adding\";\n  protected _subscriber: Subscriber | undefined;\n  protected readonly componentId: string = makeComponentId();\n\n  constructor(protected readonly $target: TargetType, protected props: P = {} as Props<P>) {\n    try {\n      if (typeof $target === \"string\") this.$target = document.querySelector($target);\n      if (this.$target === null) throw new CustomError({ msgType: \"NOT_FOUND_TARGET\", name: this.constructor.name });\n\n      this.init();\n      this.initSubscriber();\n      this.render();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * ✨ init\n   * - setState를 활용하여 초기 state를 정해주는 등 초기화가 필요한 작업이 있을 때 사용\n   */\n  protected init(): void {}\n\n  /**\n   * ✨ initSubscriber\n   * - registerSubscriberFunction() 를 활용할 때 사용\n   */\n  protected initSubscriber(): void {}\n\n  /**\n   * ✨ registerSubscriberFunction\n   * - this._subscriber에 함수를 등록하고 이 함수를 publisher의 observer에 등록\n   * - [!] initSubscriber() 메서드 내에서 사용하기\n   */\n  protected registerSubscriberFunction(publisher: Publisher, func: Function): void {\n    if (!this._subscriber) this._subscriber = new Subscriber();\n    this._subscriber.func = func;\n    this._subscriber.registerFunc(publisher);\n  }\n\n  /**\n   * ✨ setState\n   * - state를 정의하거나 업데이트할 때 사용\n   */\n  protected setState(newState: S, options?: SetStateOptions): void {\n    this._state = { ...this._state, ...newState };\n    options?.noRender || this.render(options?.isSetEvents ?? true);\n  }\n  protected get state() {\n    return this._state;\n  }\n\n  /**\n   * ✨ setBeforeRender\n   * - render 함수 바로 직전에 실행되어야 할 사항들을 설정\n   */\n  protected setBeforeRender(): void {}\n\n  /**\n   * 👾 render\n   * - 컴포넌트의 Template를 생성하고, props.children에 있는 컴포넌트들을 생성 후 Event 등록.\n   */\n  private render(isSetEvents: boolean = true): void {\n    const { $target, props } = this;\n    if ($target === null || typeof $target === \"string\") return;\n\n    this.setBeforeRender();\n\n    const { isNotKeepAdding, initInsertPosition } = props;\n    if (isNotKeepAdding) this._renderState = \"disabled\";\n\n    const { _renderState } = this;\n    if (_renderState === \"adding\") {\n      const insertPosition: InsertPosition = initInsertPosition ?? \"beforeend\";\n      $target.insertAdjacentHTML(insertPosition, this.setTemplate());\n      this._renderState = \"done\";\n    } else this.updateComponentNodes($target, _renderState === \"done\");\n\n    this.setChildren();\n    isSetEvents && this.setEvents();\n  }\n  private updateComponentNodes($target: Element, isNeedFixNodes?: boolean) {\n    const prevNodes = createNodes($target);\n    const newNodes = createTemplateNodes(this.setTemplate());\n    updateNodes($target, prevNodes, newNodes, isNeedFixNodes);\n  }\n\n  /**\n   * ✨ setTemplate\n   * - 컴포넌트의 Template 설정\n   */\n  protected setTemplate(): string {\n    return \"\";\n  }\n\n  /**\n   * ✨ setChildren\n   * - render 후, 컴포넌트를 구성하는 자식 컴포넌트를 렌더링 할 때 사용\n   */\n  protected setChildren(): void {}\n\n  /**\n   * ✨ setEvents\n   * - 컴포넌트내의 요소들에 이벤트 설정\n   */\n  protected setEvents(): void {}\n\n  /**\n   * ✨ getEventTarget\n   * - 각 컴포넌트에서 이벤트 생성 시, 이벤트가 등록될 Element를 가져옴\n   *    - Component의 componentId 프로퍼티 값을 기준으로 Element를 가져옴\n   *      (없다면 현재 컴포넌트가 등록된 this.$target(부모)를 가져옴)\n   */\n  protected getEventTarget(): Element | null {\n    let $result = null;\n    const { $target, componentId } = this;\n    if (!componentId) $result = typeof $target === \"string\" ? document.querySelector($target) : $target;\n    else $result = document.querySelector(`[data-component-id=${componentId}]`);\n    return $result;\n  }\n\n  /**\n   * ✨ createStringAttribute\n   * - 컴포넌트에서 렌더링하는 template에 attribute를 추가할 때 사용\n   */\n  protected createStringAttribute(...excludeStrs: string[]): string {\n    const arrExclude = [...defaultPropsKeys, ...excludeStrs];\n    const strAttribute = Object.entries(this.props).reduce((result, [key, value]) => {\n      if (arrExclude.includes(key)) return result;\n      result += `${key}=\"${value}\" `;\n      return result;\n    }, \"\");\n    return strAttribute;\n  }\n}\n\nexport default Component;\n","import Publisher from \"./Publisher\";\n\n/**\n * [Subscriber]\n * - 컴포넌트내에서 생성함.\n * - Publisher와 데이터를 주고 받기 위해 사용\n */\nclass Subscriber {\n  constructor(public func?: Function) {}\n\n  /**\n   * 🧚🏻 registerFunc\n   * - publisher에 Subscriber의 func 등록  \n   *  (특정 Publisher 구독)\n   */\n  registerFunc(publisher: Publisher): void {\n    if (this.func) publisher.add(this.func);\n  }\n\n  /**\n   * 🧚🏻 removeFunc\n   * - publisher에 Subscriber의 func 제거  \n   *  (특정 Publisher 구독 취소)\n   */\n  removeFunc(publisher: Publisher): void {\n    if (this.func) publisher.remove(this.func);\n  }\n}\n\nexport default Subscriber;\n","import { Component, Props, RouterLink, TargetType } from \"@src/core\";\nimport { DetailPage } from \"@src/pages\";\nimport { editPublisher, mainPublisher } from \"@src/core/PubSub\";\nimport { PostData } from \"@common/types\";\nimport \"./style.scss\";\n\ninterface BoardProps extends Props {\n  arrPostData: PostData[];\n}\n\nclass Board extends Component<{}, BoardProps> {\n  constructor(protected readonly $target: TargetType, protected props: BoardProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { arrPostData } = props;\n\n    const arrHeadKeyName: string[] = arrPostData?.length ? Object.keys(arrPostData[0]) : [];\n    const arrHeadData = [\n      [\"번호\", 15],\n      [\"제목\", 55],\n      [\"작성자\", 15],\n      [\"작성일\", 15],\n    ];\n\n    const strData = this.createTDStrings(arrPostData);\n    return `<table class=\"app-board\" data-component-id=${componentId}>\n    <thead>\n      <tr>\n      ${arrHeadData\n        .map(([txt, width], i) => {\n          const thClassName = arrHeadKeyName[i] ? `class=${arrHeadKeyName[i]}` : \"\";\n          return `<th style=${`width:` + `${width}%; ${thClassName}`}>${txt}</th>`;\n        })\n        .join(\"\")}\n      </tr>\n    </thead>\n      ${strData.length ? `<tbody>${strData.map((str) => `${str}`).join(\"\")}</tbody>` : \"\"}\n    </table>\n    `;\n  }\n\n  protected setChildren(): void {\n    const {\n      props: { arrPostData },\n    } = this;\n\n    // 제목 생성 (RouterLink)\n    arrPostData.forEach(({ id, subject }) => {\n      const $tdSubject = document.querySelector(`tr[data-id=\"${id}\"] td.subject`);\n      if (!$tdSubject) return;\n      new RouterLink($tdSubject, {\n        href: `/detail?id=${id}`,\n        text: subject ?? '제목 없음',\n        componentInfo: { Component: DetailPage },\n        publisherList: [mainPublisher, editPublisher],\n      });\n    });\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createTDStrings(arrPostData: PostData[]): string[] {\n    const result: string[] = [];\n    if (!arrPostData.length) return [];\n    arrPostData.forEach((data) => {\n      const { id } = data;\n      const strTds = Object.entries(data).reduce((result, [key, value]) => {\n        if (key === \"contents\") return result;\n        const isSubject = key !== \"subject\"; // 제목의 경우 RouterLink 컴포넌트로 생성\n        value = value instanceof Date ? value.toLocaleDateString() : value;\n        result += `<td class=${key}>${isSubject ? value : \"\"}</td>`;\n        return result;\n      }, \"\");\n      result.push(`<tr data-id=${id}>${strTds}</tr>`);\n    });\n    return result;\n  }\n  // ------\n}\n\nexport default Board;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype DefaultButtonProps = Pick<HTMLButtonElement, \"name\"> & Partial<Pick<HTMLButtonElement, \"type\">>;\ninterface ButtonProps extends Props, DefaultButtonProps {\n  text: string;\n  color?: \"normal\" | \"blue\" | \"red\";\n  size?: \"small\" | \"medium\" | \"large\";\n}\n\nclass Button extends Component<{}, ButtonProps> {\n  constructor(protected readonly $target: TargetType, protected props: ButtonProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { color, size } = props;\n    const strColor = color ? `color--${color}` : `color--normal`;\n    const strSize = size ? `size--${size}` : `size--small`;\n    const strClassName = `${strColor} ${strSize}`;\n\n    return `<button class=\"app-button ${strClassName}\"\n      ${this.createStringAttribute(\"text\", \"color\", \"size\")} data-component-id=${componentId}>\n      ${props.text}</button>`;\n  }\n}\n\nexport default Button;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype DefaultInputProps = Pick<HTMLInputElement, \"name\" | \"type\"> &\n  Partial<Pick<HTMLInputElement, \"placeholder\" | \"value\">>;\ninterface InputProps extends Props, DefaultInputProps {}\n\nclass Input extends Component<{}, InputProps> {\n  constructor(protected readonly $target: TargetType, protected props: InputProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<input class=\"app-input\" ${this.createStringAttribute()} data-component-id=${componentId}></input>`;\n  }\n}\n\nexport default Input;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ninterface PaginationProps extends Props {\n  pageNum: number;\n  max: number;\n}\n\nclass Pagination extends Component<{}, PaginationProps> {\n  constructor(protected readonly $target: TargetType, protected props: PaginationProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `\n    <div class=\"app-pagination\" data-component-id=${componentId}>\n      <ul class=\"list\">\n        ${this.createLiItemStrings().join(\"\")}\n      </ul>\n    </div>\n    `;\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createLiItemStrings(): string[] {\n    let { pageNum, max } = this.props;\n    if (pageNum > max && pageNum !== 1) pageNum = max;\n\n    const MAX_NUM_OF_PAGE = 5;\n    const REMAINDER = pageNum % MAX_NUM_OF_PAGE === 0 ? MAX_NUM_OF_PAGE : pageNum % MAX_NUM_OF_PAGE;\n\n    const startIdx = pageNum - REMAINDER;\n    const endIdx = pageNum + (MAX_NUM_OF_PAGE - REMAINDER);\n\n    const items: string[] = [];\n    let nIdx = startIdx;\n    while (nIdx < endIdx) {\n      if (nIdx + 1 > max) break;\n      const strClassName = nIdx + 1 === pageNum ? `class=\"current\"` : \"\";\n      items.push(`<li ${strClassName}>${nIdx + 1}</li>`);\n      nIdx++;\n    }\n\n    const isStart = startIdx === 0;\n    const isLast = max === nIdx;\n\n    const strFirstItem = `<li class=\"prev${isStart ? \" disabled\" : \"\"}\">&larr;</li>`;\n    const strLastItem = `<li class=\"next${isLast ? \" disabled\" : \"\"}\">&rarr;</li>`;\n\n    return [strFirstItem, ...items, strLastItem];\n  }\n}\nexport default Pagination;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport { MainPublisherState } from \"@src/core/PubSub\";\nimport \"./style.scss\";\n\ntype DefaultSelectBoxProps = Pick<MainPublisherState, \"numPostList\">;\ninterface SelectBoxProps extends Props, DefaultSelectBoxProps {\n  selectedValue?: string | number;\n}\n\nclass SelectBox extends Component<{}, SelectBoxProps> {\n  constructor(protected readonly $target: TargetType, protected props: SelectBoxProps) {\n    super($target, props);\n  }\n\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { numPostList, selectedValue } = props;\n    if (!numPostList.length) return ``;\n    return `\n    <select class=\"app-selectbox\" data-component-id=${componentId}>\n      ${numPostList.map((v) => `<option value=${v} ${selectedValue === v ? 'selected' : ''}>${v}</option>`).join(\"\")}\n    </select>\n    `;\n  }\n}\n\nexport default SelectBox;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ninterface SpanProps extends Props {\n  text: string;\n  fontSize?: number;\n  isBold?: boolean;\n}\n\nclass Span extends Component<{}, SpanProps> {\n  constructor(protected readonly $target: TargetType, protected props: SpanProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { text, isBold } = props;\n\n    let fontSize = props.fontSize;\n    if (fontSize) {\n      if (fontSize < 10) fontSize = 10;\n      else if (fontSize > 50) fontSize = 50;\n    }\n\n    const strFontSize = fontSize ? `fontSize--${fontSize}` : \"\";\n    const strBold = isBold ? \"bold\" : \"\";\n    const strClassName = `${strFontSize} ${strBold}`;\n    return `<span class=\"app-span ${strClassName}\" data-component-id=${componentId}>${text}</span>`;\n  }\n}\n\nexport default Span;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype DefaultTextareaProps = Pick<HTMLTextAreaElement, \"name\"> &\n  Partial<Pick<HTMLTextAreaElement, \"placeholder\" | \"rows\" | \"cols\" | \"maxLength\" | \"value\">>;\ninterface TextareaProps extends Props, DefaultTextareaProps {\n  isFullSize?: boolean;\n}\n\nclass Textarea extends Component<{}, TextareaProps> {\n  constructor(protected readonly $target: TargetType, protected props: TextareaProps) {\n    super($target, props);\n  }\n\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { value, isFullSize } = props;\n    const strFullSize = isFullSize ? `fullsize` : \"\";\n    return `<textarea class=\"app-textarea ${strFullSize}\"  ${this.createStringAttribute(\n      \"value\",\n      \"isFullSize\"\n    )} data-component-id=${componentId}>${value ? value : \"\"}</textarea>`;\n  }\n}\n\nexport default Textarea;\n","import { Button, Span } from \"@src/components\";\nimport { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype ButtonHandlerNames = \"handleConfirmClick\" | \"handleCancelClick\";\ntype ButtonNames = \"confirm\" | \"cancel\";\nexport interface ModalProps extends Props {\n  noticeText: string;\n  showButtons?: \"CONFIRM\" | \"CANCEL\" | \"ALL\";\n  buttonTexts?: {\n    [name in ButtonNames]?: string;\n  };\n  clickHandler: {\n    [name in ButtonHandlerNames]?: () => void;\n  };\n}\n\nclass Modal extends Component<{}, ModalProps> {\n  constructor(protected readonly $target: TargetType, protected props: ModalProps) {\n    super($target, props);\n  }\n  protected init(): void {\n    if (!this.props.showButtons) this.props.showButtons = \"CONFIRM\";\n  }\n\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `\n    <div class=\"app-error-modal\" data-component-id=${componentId}>\n      <div class=\"inner\">\n        <div class=\"buttons\"></div>\n      </div>\n    </div>`;\n  }\n\n  protected setChildren(): void {\n    const { noticeText: text, showButtons, buttonTexts } = this.props;\n    new Span(\".app-error-modal .inner\", { text, fontSize: 16, initInsertPosition: \"afterbegin\" });\n\n    const btnsSelector = `.app-error-modal .inner .buttons`;\n    if (showButtons === \"ALL\" || showButtons === \"CANCEL\")\n      new Button(btnsSelector, { text: buttonTexts?.cancel ?? \"취소\", name: \"cancel\", color: \"red\", size: \"small\" });\n    if (showButtons === \"ALL\" || showButtons === \"CONFIRM\")\n      new Button(btnsSelector, { text: buttonTexts?.confirm ?? \"확인\", name: \"confirm\", color: \"blue\", size: \"small\" });\n  }\n\n  protected setEvents(): void {\n    this.registerButtonsClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private registerButtonsClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleButtonsClick(e));\n  }\n\n  private handleButtonsClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isButtons = $target.closest(\".buttons\");\n    if (!isButtons) return;\n\n    const isButton = $target.nodeName === \"BUTTON\";\n    if (!isButton) return;\n\n    const name = ($target as HTMLButtonElement).name;\n    const {\n      clickHandler: { handleConfirmClick, handleCancelClick },\n    } = this.props;\n    if (name === \"confirm\" && handleConfirmClick) handleConfirmClick();\n    else if (name === \"cancel\" && handleCancelClick) handleCancelClick();\n  }\n  // ------\n}\n\nexport default Modal;\n","import { ResponseDataType } from \"@common/types\";\nimport { Component, CustomError, Props, renderPath, RouterLink } from \"@src/core\";\nimport { Button } from \"@src/components\";\nimport Modal, { ModalProps } from \"@src/compositions/Modal\";\nimport { EditPage, MainPage } from \"@src/pages\";\nimport { editPublisher, mainPublisher } from \"@src/core/PubSub\";\nimport { execFetch } from \"@src/utils/functions\";\nimport \"./style.scss\";\n\ninterface DetailPageBottomBarState {\n  errMessage?: string;\n  deleteStatus?: boolean;\n}\n\ninterface DetailPageBottomBarProps extends Props {\n  dataId?: string;\n}\n\nclass DetailPageBottomBar extends Component<DetailPageBottomBarState, DetailPageBottomBarProps> {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"detail__page--bottombar\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const { props } = this;\n    const commonLinkProps = {\n      isButton: true,\n      publisherList: [mainPublisher, editPublisher],\n    };\n    const editId = props.dataId ? +props.dataId : -1;\n\n    new RouterLink(\".detail__page--bottombar\", {\n      ...commonLinkProps,\n      href: `/edit`,\n      text: \"수정\",\n      componentInfo: { Component: EditPage },\n      callbackOption: {\n        func: () => mainPublisher.setState({ ...mainPublisher.state, editId }),\n        runPosition: \"afterRenderPath\",\n      },\n    });\n    new Button(\".detail__page--bottombar\", { name: \"delete\", text: \"삭제\" });\n    new RouterLink(\".detail__page--bottombar\", {\n      ...commonLinkProps,\n      href: `/`,\n      text: \"목록\",\n      componentInfo: { Component: MainPage },\n    });\n    this.setDetailBottomModal();\n  }\n\n  protected setEvents(): void {\n    this.registerDetailBottomBarClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private setDetailBottomModal(): void {\n    if (!this.state || (!this.state.errMessage && !this.state.deleteStatus)) return;\n    const modalProps = this.createDeleteModalProps();\n\n    // 오류가 있을 경우\n    const { errMessage } = this.state;\n    if (errMessage) {\n      modalProps.noticeText = errMessage;\n      modalProps.clickHandler.handleConfirmClick = () => {\n        this.setState({ ...this.state, errMessage: undefined }, { isSetEvents: false });\n        renderPath({ href: \"/\", componentInfo: { Component: MainPage } });\n      };\n    }\n\n    new Modal(\".detail__page--bottombar\", {\n      ...modalProps,\n      showButtons: errMessage ? \"CONFIRM\" : \"ALL\",\n      buttonTexts: errMessage ? { confirm: \"목록으로\" } : undefined,\n    });\n  }\n\n  // Modal에 props로 전달되는 요소들 - 삭제 전용\n  private createDeleteModalProps(): ModalProps {\n    const noticeText = \"정말 삭제하시겠습니까?\";\n    const setInitDeleteStatus = () => this.setState({ ...this.state, deleteStatus: undefined }, { isSetEvents: false });\n    const handleConfirmClick: () => void = () => {\n      setInitDeleteStatus();\n      this.requestDeleteData();\n    };\n    const handleCancelClick: () => void = setInitDeleteStatus;\n    return {\n      noticeText,\n      clickHandler: { handleCancelClick, handleConfirmClick },\n    };\n  }\n\n  // ------\n\n  // [2] Events\n  private registerDetailBottomBarClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleDetailBottomBarClick(e));\n  }\n\n  private handleDetailBottomBarClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isButton = $target.classList.contains(\"app-button\") && $target instanceof HTMLButtonElement;\n    if (!isButton) return;\n    if ($target.name === \"delete\") this.setState({ ...this.state, deleteStatus: true }, { isSetEvents: false });\n  }\n\n  // 서버로 전송 (게시글 삭제) -- Modal 컴포넌트에서 처리\n  private async requestDeleteData(): Promise<void> {\n    try {\n      const { dataId: id } = this.props;\n      const options = {\n        method: \"DELETE\",\n        body: JSON.stringify({ id }),\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n      const res: ResponseDataType | null = await execFetch({ type: \"delete\", options });\n      if (!res) throw new CustomError({ msgType: \"RESPONSE_IS_NULL\", name: \"DetailPage, DELETE\" });\n\n      const { message, statusCode } = res;\n      const isResOK = statusCode >= 200 && statusCode < 400;\n      if (!isResOK) throw new CustomError({ customMessage: message, name: \"DetailPage, DELETE\" });\n\n      editPublisher.setState({ ...editPublisher.state, isEdited: true });\n\n      renderPath({ href: \"/\", componentInfo: { Component: MainPage } });\n    } catch (e) {\n      const { message: errMessage } = e as unknown as Error;\n      console.error(e);\n      this.setState({ ...this.state, errMessage }, { isSetEvents: false });\n    }\n  }\n\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default DetailPageBottomBar;\n","import { PostData } from \"@common/types\";\n\nexport type PostDataKorKeys = {\n  [name in keyof PostData]: string;\n};\nexport const postDataKorKeys: PostDataKorKeys = {\n  id: \"번호\",\n  subject: \"제목\",\n  author: \"작성자\",\n  createdDate: \"작성일\",\n  contents: \"내용\",\n};\n\nexport type RequiredPostDataKey = keyof Omit<PostData, \"id\" | \"createdDate\">;\nexport const requiredPostDataKeys: RequiredPostDataKey[] = [\"author\", \"contents\", \"subject\"];\n","import { Component, CustomError, Props, renderPath } from \"@src/core\";\nimport { postDataKorKeys } from \"@src/utils/types\";\nimport { MainPage } from \"@src/pages\";\nimport { Modal } from \"@src/compositions\";\nimport { PostData, ResponseDataType } from \"@common/types\";\nimport { execFetch } from \"@src/utils/functions\";\nimport \"./style.scss\";\n\ninterface DetailPageContentState {\n  currData?: PostData | null;\n  errMessage?: string;\n}\ninterface DetailPageContentProps extends Props {\n  dataId?: string;\n}\n\ninterface PostDataHTMLType {\n  textInfoStrings: string;\n  contents: string;\n}\n\nclass DetailPageContent extends Component<DetailPageContentState, DetailPageContentProps> {\n  protected init(): void {\n    const { dataId } = this.props;\n    this.setState({ ...this.state, currData: null });\n    if (dataId) this.setPostData(+dataId);\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    const { textInfoStrings, contents } = this.createPostDataStrings(this.state?.currData);\n\n    return `\n    <div class=\"detail__page--content\" data-component-id=${componentId}>\n      <ul class=\"textinfo\">${textInfoStrings}</ul>\n      <div class=\"contents\">${contents}</div>\n    </div>`;\n  }\n\n  protected setChildren(): void {\n    if (this.state && this.state.errMessage) {\n      const { errMessage: noticeText } = this.state;\n      new Modal(\".detail__page--content\", {\n        noticeText,\n        buttonTexts: {\n          confirm: \"목록으로\",\n        },\n        clickHandler: {\n          handleConfirmClick: () => {\n            this.setState({ ...this.state, errMessage: undefined }, { isSetEvents: false });\n            renderPath({ href: \"/\", componentInfo: { Component: MainPage } });\n          },\n        },\n      });\n    }\n  }\n\n  protected setEvents(): void {}\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createPostDataStrings(postData?: PostData | null): PostDataHTMLType {\n    const textInfoItems: string[] = [];\n    if (!postData) return { textInfoStrings: \"\", contents: \"내용 없음\" };\n\n    const keys = Object.keys(postData) as (keyof PostData)[];\n    for (let i = 0; i < keys.length; i++) {\n      if (keys[i] === \"contents\") continue;\n      const name = postDataKorKeys[keys[i]];\n      let value = postData[keys[i]];\n      if (keys[i] === \"createdDate\") value = (value as Date).toLocaleString();\n      textInfoItems.push(`<li><span class=\"name\">${name}</span><span>${value ?? \"\"}</span></li>`);\n    }\n\n    return { textInfoStrings: textInfoItems.join(\"\"), contents: postData[\"contents\"] ?? \"내용 없음\" };\n  }\n\n  // 초기 렌더링 시 데이터 불러온 후, state.currData에 적용\n  private async setPostData(id: number): Promise<void> {\n    try {\n      const options = { method: \"GET\", id };\n      const res: ResponseDataType<PostData> | null = await execFetch({ type: \"getPost\", options });\n      if (!res || !res.data) throw new CustomError({ name: \"DetailPage, GET CONTENT\", msgType: \"RESPONSE_IS_NULL\" });\n\n      const { message, statusCode, data: currData } = res;\n      const isResOK = statusCode >= 200 && statusCode < 400;\n      if (!isResOK) throw new CustomError({ name: \"DetailPage, GET CONTENT\", customMessage: message });\n\n      if (currData.createdDate) currData.createdDate = new Date(currData.createdDate);\n\n      this.setState({ ...this.state, currData });\n    } catch (e) {\n      const { message: errMessage } = e as unknown as Error;\n      console.error(e);\n      this.setState({ ...this.state, errMessage }, { isSetEvents: false });\n    }\n  }\n  // ------\n\n  // [2] Events\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default DetailPageContent;\n","import { PostData, ResponseDataType } from \"@common/types\";\nimport { Button } from \"@src/components\";\nimport { Component, CustomError, renderPath, RouterLink, RouterLinkProps } from \"@src/core\";\nimport { editPublisher, mainPublisher, initEditState } from \"@src/core/PubSub\";\nimport { DetailPage, MainPage } from \"@src/pages\";\nimport { Modal } from \"@src/compositions\";\nimport { execFetch } from \"@src/utils/functions\";\nimport { requiredPostDataKeys } from \"@src/utils/types\";\nimport \"./style.scss\";\n\ninterface EditPageBottomBarState {\n  errMessage?: string;\n}\n\nclass EditPageBottomBar extends Component<EditPageBottomBarState> {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"edit__page--bottombar\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const commonLinkProps = { isButton: true, componentInfo: { Component: DetailPage }, publisherList: [mainPublisher, editPublisher] };\n    new Button(\".edit__page--bottombar\", { name: \"goback\", text: \"뒤로\" });\n    const routerLinkProps: RouterLinkProps<number> = {\n      ...commonLinkProps,\n      href: `/detail`,\n      name: \"submitlink\",\n      text: \"전송\",\n      callbackOption: {\n        func: async (): Promise<number> => await this.regsiterEditData(),\n        runPosition: \"beforeRenderPath\",\n        options: { isID: true },\n      },\n    };\n    new RouterLink(\".edit__page--bottombar\", routerLinkProps);\n\n    if (this.state && this.state.errMessage) {\n      const { errMessage: noticeText } = this.state;\n      new Modal(\".edit__page--bottombar\", {\n        noticeText,\n        buttonTexts: {\n          confirm: \"목록으로\",\n        },\n        clickHandler: {\n          handleConfirmClick: () => {\n            this.setState({ ...this.state, errMessage: undefined }, { isSetEvents: false });\n            renderPath({ href: \"/\", componentInfo: { Component: MainPage } });\n          },\n        },\n      });\n    }\n  }\n\n  protected setEvents(): void {\n    this.registerEditBottomBarClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  // ------\n\n  // [2] Events\n  private registerEditBottomBarClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleEditBottomBarClick(e));\n  }\n\n  private handleEditBottomBarClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isButton = $target.classList.contains(\"app-button\") && $target instanceof HTMLButtonElement;\n    if (!isButton) return;\n    if ($target.name === \"goback\") window.history.back();\n  }\n\n  // [2-1] Events (callback)\n  /** RouterLink(submitlink)의 콜백, 현재 데이터를 전송 (작성 / 수정)  */\n  private async regsiterEditData(): Promise<number> {\n    const { editData } = editPublisher.state;\n    const notEmptyCnt = Object.keys(editData).reduce((result, key) => {\n      if (editData[key as keyof PostData]) result++;\n      return result;\n    }, 0);\n    const isOK = notEmptyCnt >= requiredPostDataKeys.length;\n    if (!isOK) return -1;\n    const isEdit = notEmptyCnt > requiredPostDataKeys.length;\n    const currId = await this.requestCreateData(editData, isEdit);\n    return currId;\n  }\n\n  // 서버로 전송 (작성 or 수정)\n  private async requestCreateData(editData: PostData, isEdit?: boolean): Promise<number> {\n    try {\n      const type = isEdit ? \"edit\" : \"write\";\n      const method = isEdit ? \"PUT\" : \"POST\";\n      const options = { method, body: JSON.stringify(editData), headers: { \"Content-Type\": \"application/json\" } };\n      const res: ResponseDataType<number> | null = await execFetch({ type, options });\n\n      if (!res || !res.data) {\n        const strType = type === \"edit\" ? \"수정\" : \"작성\";\n        const customMessage = `서버에 오류가 있습니다. 글을 ${strType}할 수 없습니다.`;\n        throw new CustomError({ name: `EditPage, ${type.toUpperCase()}`, customMessage });\n      }\n\n      const { message, statusCode, data: id } = res;\n      const isResOK = statusCode >= 200 && statusCode < 400;\n      if (!isResOK) throw new CustomError({ name: `EditPage, ${type.toUpperCase()}`, customMessage: message });\n\n      editPublisher.setState({ ...editPublisher.state, editData: initEditState.editData, isEdited: true });\n      return id > 0 ? id : -1;\n    } catch (e) {\n      const { message: errMessage } = e as unknown as Error;\n      console.error(e);\n      this.setState({ ...this.state, errMessage }, { isSetEvents: false });\n\n      return -1;\n    }\n  }\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default EditPageBottomBar;\n","import { Input, Textarea } from \"@src/components\";\nimport { Component, Props } from \"@src/core\";\nimport { editPublisher } from \"@src/core/PubSub\";\n\nimport { postDataKorKeys, PostDataKorKeys } from \"@src/utils/types\";\nimport { PostData } from \"@common/types\";\n\nimport \"./style.scss\";\n\ninterface EditPageContentProps extends Props {\n  editData?: PostData;\n}\n\nclass EditPageContent extends Component<{}, EditPageContentProps> {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    const editInfoStrings = this.createEditInfoStrings();\n    return `\n    <div class=\"edit__page--content\" data-component-id=${componentId}>\n      <ul class=\"editinfo\">${editInfoStrings}</ul>\n      <div class=\"editbox\"></div>\n    </div>`;\n  }\n\n  protected setChildren(): void {\n    const { editData } = this.props;\n\n    const nameKeys: (keyof PostDataKorKeys)[] = [\"subject\", \"author\"];\n    nameKeys.forEach((name, i) => {\n      if (!editData) return;\n      let value = editData[name];\n      if (typeof value !== \"string\") value = \"\";\n      const placeholder = postDataKorKeys[name];\n      new Input(`ul.editinfo li[data-key=\"${i}\"]`, { name, type: \"text\", value, placeholder });\n    });\n\n    new Textarea(`.editbox`, {\n      name: \"contents\",\n      value: editData && (editData[\"contents\"] ?? \"\"),\n      isFullSize: true,\n      placeholder: \"하고싶은 말은..?\",\n    });\n  }\n\n  protected setEvents(): void {\n    this.registerEditContentsKeyup();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createEditInfoStrings(): string {\n    const nameKeys: (keyof PostDataKorKeys)[] = [\"subject\", \"author\"];\n    const editInfoItems: string[] = nameKeys.reduce((result, key, i) => {\n      const strItem = `<li data-key=${i}><span class=\"name\">${postDataKorKeys[key]}</span></li>`; // input은 setChildren에서 렌더링\n      result.push(strItem);\n      return result;\n    }, [] as string[]);\n    return editInfoItems.join(\"\");\n  }\n  // ------\n\n  // [2] Events\n  private registerEditContentsKeyup(): void {\n    this.getEventTarget()?.addEventListener(\"keyup\", (e) => this.handleEditContentsKeyup(e));\n  }\n\n  private handleEditContentsKeyup(e: KeyboardEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isTextarea = $target.nodeName === \"TEXTAREA\" && $target.classList.contains(\"app-textarea\");\n    const isInput = $target.nodeName === \"INPUT\" && $target.classList.contains(\"app-input\");\n    if (!isInput && !isTextarea) return;\n\n    if (isTextarea) {\n      const contents = ($target as HTMLTextAreaElement).value;\n      const { state } = editPublisher;\n      editPublisher.setState({ ...state, editData: { ...state.editData, contents } });\n    } else {\n      const name = ($target as HTMLInputElement).name;\n      const value = ($target as HTMLInputElement).value;\n      const { state } = editPublisher;\n      editPublisher.setState({ ...state, editData: { ...state.editData, [name]: value } });\n    }\n  }\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default EditPageContent;\n","import { Button, Input, SelectBox } from \"@src/components\";\nimport { Component, createRouterInfo, RouterLink } from \"@src/core\";\nimport { mainPublisher, initMainState, MainFilterOptions, editPublisher, initEditState } from \"@src/core/PubSub\";\nimport { EditPage } from \"@src/pages\";\nimport { getAllPostData } from \"@src/utils/functions\";\nimport \"./style.scss\";\n\nclass MainPageTopBar extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `\n    <div class=\"main__page--topbar\" data-component-id=${componentId}>\n      <div class=\"topbar--box\"></div>\n      <div class=\"topbar--box\"></div>\n    </div>`;\n  }\n  protected setChildren(): void {\n    const routerInfo = createRouterInfo();\n    const { numPostList, filterOptions } = mainPublisher.state;\n    const { searchWord, numPost } = filterOptions;\n\n    const createSelector = (idx: number) => `.main__page--topbar .topbar--box:nth-child(${idx})`;\n    new Button(createSelector(1), { name: \"refrash\", text: \"새로고침\" });\n    new Button(createSelector(1), { name: \"init\", text: \"초기화\" });\n    new RouterLink(createSelector(1), {\n      href: \"/write\",\n      text: \"작성\",\n      componentInfo: { Component: EditPage },\n      isButton: true,\n      publisherList: [mainPublisher, editPublisher],\n      callbackOption: {\n        func: () => editPublisher.setState({ ...initEditState }),\n        runPosition: \"beforeRenderPath\",\n      },\n    });\n    new Input(createSelector(2), {\n      name: \"search_input\",\n      type: \"text\",\n      placeholder: \"검색어를 입력해주세요.\",\n      value: searchWord,\n    });\n    new SelectBox(createSelector(2), { numPostList, selectedValue: numPost });\n  }\n\n  protected setEvents(): void {\n    this.registerMainTopBarClick();\n    this.registerMainTopBarKeyUp();\n    this.registerMainTopBarChange();\n  }\n\n  // --------------------------------------------------\n\n  // [1] Events\n  private registerMainTopBarClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleMainTopBarClick(e));\n  }\n\n  private handleMainTopBarClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const $closestTarget = $target.closest(\".topbar--box\");\n    if (!$closestTarget) return;\n\n    const isButton = $target.classList.contains(\"app-button\") && $target instanceof HTMLButtonElement;\n    if (isButton) {\n      const buttonName = $target.name;\n      if (buttonName === \"init\") this.initMainTopBarElements();\n      else if (buttonName === \"refrash\") this.refrashPostData();\n    }\n  }\n  // 초기화\n  private initMainTopBarElements(): void {\n    const strInputSelector = `.topbar--box:nth-child(2) input[name=\"search_input\"]`;\n    const $searchInput = this.getEventTarget()?.querySelector(strInputSelector);\n    $searchInput && (($searchInput as HTMLInputElement).value = \"\");\n\n    const { filterOptions } = initMainState;\n    const strSelectBoxSelector = `.topbar--box:nth-child(2) .app-selectbox`;\n    const $selectbox = this.getEventTarget()?.querySelector(strSelectBoxSelector);\n    $selectbox && (($selectbox as HTMLSelectElement).value = `${filterOptions.numPost}`);\n\n    mainPublisher.setState({ ...initMainState, isInit: true });\n  }\n  // 새로고침\n  private async refrashPostData(): Promise<void> {\n    try {\n      const { data: latestPostdata } = await getAllPostData();\n      if (!latestPostdata) return;\n      initMainState.postData = latestPostdata;\n      mainPublisher.setState({ ...mainPublisher.state, postData: [...latestPostdata], isRefresh: true });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  // ~~~\n\n  private registerMainTopBarKeyUp(): void {\n    this.getEventTarget()?.addEventListener(\"keyup\", (e) => this.handleMainTopBarKeyUp(e));\n  }\n\n  private handleMainTopBarKeyUp(e: KeyboardEvent | Event): void {\n    const $target = e.target as HTMLInputElement;\n    const isSearchInput = $target.name === \"search_input\" && $target.nodeName === \"INPUT\";\n    if (!isSearchInput) return;\n\n    const searchWord = $target.value;\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    const filterOptions: MainFilterOptions = { ...prevFilterOptions, searchWord };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions });\n  }\n  // ~~~\n\n  private registerMainTopBarChange(): void {\n    this.getEventTarget()?.addEventListener(\"change\", (e) => this.handleMainTopBarChange(e));\n  }\n  private handleMainTopBarChange(e: Event): void {\n    const $target = e.target as Element;\n    if (!$target) return;\n    const isSelectBox = $target.nodeName === \"SELECT\" && $target.classList.contains(\"app-selectbox\");\n    if (!isSelectBox) return;\n    const $select = $target as HTMLSelectElement;\n\n    const numPost = +$select.value;\n    if (Number.isNaN(numPost)) return;\n\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions: { ...prevFilterOptions, numPost } });\n  }\n  // ------\n}\nexport default MainPageTopBar;\n","import { Board, Pagination } from \"@src/components\";\nimport { Component, CustomError } from \"@src/core\";\nimport { mainPublisher, MainFilterOptions, initMainState, createPostData, editPublisher } from \"@src/core/PubSub\";\nimport { Modal } from \"@src/compositions\";\nimport { getAllPostData } from \"@src/utils/functions\";\n\nimport \"./style.scss\";\n\ninterface MainPageBoardState {\n  isUpdate?: boolean;\n  errMessage?: string;\n}\n\nclass MainPageBoard extends Component<MainPageBoardState> {\n  protected init(): void {\n    this.initGetAllPostData();\n    this.setState({ ...this.state, isUpdate: false }, { noRender: true });\n  }\n\n  protected initSubscriber(): void {\n    // main\n    this.registerSubscriberFunction(mainPublisher, () => {\n      const { currKeys } = mainPublisher.recentChangedKeys;\n      if (currKeys.includes(\"isInit\")) return this.execInitMainPageBoard();\n      if (currKeys.includes(\"filterOptions\") || currKeys.includes(\"postData\") || currKeys.includes(\"isRefresh\"))\n        this.execUpdateMainPageBoard(currKeys.includes(\"isRefresh\"));\n    });\n  }\n\n  protected setBeforeRender(): void {\n    if (!this.state) return;\n    if (this.state.isUpdate) this.setState({ ...this.state, isUpdate: false }, { noRender: true });\n  }\n\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"main__page--board\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const { filterOptions, postData } = mainPublisher.state;\n    const { pageNum, numPost } = filterOptions;\n\n    // 👇 여기서만 filterOptions에 따른 데이터 적용(Board 컴포넌트에만 적용)\n    const arrPostData = createPostData({ filterOptions, postData });\n    new Board(\".main__page--board\", { arrPostData });\n\n    // 👇 여기서는 필터링되어 잘라낸 데이터가 아닌 필터링 된 전체 데이터 갯수를 기준으로 해야함!\n    const pageOnlyPostData = createPostData({ filterOptions, postData, isFullData: true });\n    const max = Math.ceil(pageOnlyPostData.length / numPost);\n    new Pagination(\".main__page--board\", { pageNum, max });\n\n    if (this.state && this.state.errMessage) {\n      const { errMessage: noticeText } = this.state;\n      new Modal(\".main__page--board\", {\n        noticeText,\n        showButtons: \"CANCEL\",\n        buttonTexts: { cancel: \"닫기\" },\n        clickHandler: {\n          handleCancelClick: () => {\n            this.setState({ ...this.state, errMessage: undefined }, { isSetEvents: false });\n          },\n        },\n      });\n    }\n  }\n\n  protected setEvents(): void {\n    this.registerMainBoardClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  /** 👾 initGetAllPostData: 서버에서 모든 게시물 데이터를 가져와서 mainPublisher 업데이트\n   * - 초기 렌더링에는 무조건 실행하지만, 작성 & 수정때는 mainPublisher에 등록된 함수들은 실행되면 안됨.\n   */\n  private async initGetAllPostData() {\n    try {\n      const customMessage = `서버에 데이터가 없거나 오류가 있습니다. 게시글 작성을 시도해주세요.`;\n      const res = await getAllPostData(customMessage);\n\n      if (!res || !res.data || (!res.data && res.message)) {\n        throw new CustomError({ name: `MainPage, GET ALL POST`, customMessage });\n      }\n      initMainState.postData = res.data;\n\n      const { isEdited } = editPublisher.state;\n      mainPublisher.setState(\n        { ...mainPublisher.state, postData: [...res.data] },\n        { notExec: isEdited ? true : undefined }\n      );\n      if (isEdited) editPublisher.setState({ ...editPublisher.state, isEdited: false }, { notExec: true });\n    } catch (e) {\n      const { message: errMessage } = e as unknown as Error;\n      console.error(e);\n      this.setState({ ...this.state, errMessage }, { isSetEvents: false });\n    }\n  }\n\n  // ------\n\n  // [2] Events\n  private registerMainBoardClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleMainBoardClick(e));\n  }\n  private handleMainBoardClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isRouterLink = $target.nodeName === \"A\" && $target.classList.contains(\"app-link\");\n    if (isRouterLink) return;\n\n    const $board = $target.closest(\".app-board\");\n    const $pagination = $target.closest(\".app-pagination\");\n    if (!$board && !$pagination) return;\n    if ($board) {\n      const $tr = $target.closest(\"tr\");\n      if (!$tr) return;\n\n      const isCreatedDate = $target.nodeName === \"TH\" && $target.classList.contains(\"createdDate\");\n      const isAuthor = $target.nodeName === \"TD\" && $target.classList.contains(\"author\") && $target.textContent;\n      if (isCreatedDate) return this.execCreatedDateClick();\n      if (isAuthor && $target.textContent) return this.execAuthorClick($target.textContent);\n    } else {\n      const isItem = $target.nodeName === \"LI\";\n      if (isItem) return this.execPaginationItemClick($target as HTMLLIElement);\n    }\n  }\n\n  /** 게시판 Item 클릭 - 작성일 정렬 */\n  private execCreatedDateClick(): void {\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    const isDesc = !prevFilterOptions.isDesc; // 항상 이전 값과 반대로\n\n    const filterOptions = { ...prevFilterOptions, isDesc };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  private execAuthorClick(author: string): void {\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    const filterOptions = { ...prevFilterOptions, author };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  /** 페이지네이션 Item 클릭 */\n  private execPaginationItemClick($li: HTMLLIElement): void {\n    const isPrevNext = $li.classList.contains(\"prev\") || $li.classList.contains(\"next\");\n    const { filterOptions: prevFilterOptions, postData } = mainPublisher.state;\n    let pageNum: number = -1;\n\n    if (isPrevNext) {\n      if (!this.state || $li.classList.contains(\"disabled\")) return;\n      const { pageNum: prevNum, numPost } = prevFilterOptions;\n      const max = Math.ceil(postData.length / numPost);\n\n      const isPrev = $li.classList.contains(\"prev\");\n      pageNum = isPrev ? prevNum - 5 : prevNum + 5;\n      if (pageNum > max) pageNum = max;\n      else if (pageNum <= 0) pageNum = 1;\n    } else {\n      const tmpPageNum = +`${$li.textContent}`;\n      if (Number.isNaN(tmpPageNum)) return;\n      pageNum = tmpPageNum;\n    }\n    const filterOptions: MainFilterOptions = { ...prevFilterOptions, pageNum };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions }, { notExec: true });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  /** 게시물 초기화 (MainPageTopBar의 '초기화'버튼이 클릭되었을 때 작동) */\n  private execInitMainPageBoard(): void {\n    mainPublisher.setState({ ...mainPublisher.state, ...initMainState, isInit: false }, { notExec: true });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  /** 게시물 업데이트 (새로고침 버튼 클릭 시 작동) */\n  private execUpdateMainPageBoard(isRefresh?: boolean): void {\n    if (isRefresh) mainPublisher.setState({ ...mainPublisher.state, isRefresh: false }, { notExec: true });\n    return this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n}\nexport default MainPageBoard;\n","import { DetailPageBottomBar, DetailPageContent } from \"@src/compositions\";\nimport { Component, createQueryStrings, renderPath } from \"@src/core\";\nimport \"./style.scss\";\n\ninterface DetailPageState {\n  dataId?: string;\n}\n\nclass DetailPage extends Component<DetailPageState> {\n  protected init(): void {\n    const { search } = new URL(window.location.href);\n    const dataId = createQueryStrings(search)?.find((v) => v.key === \"id\")?.value;\n\n    if (!dataId) renderPath();\n    else this.setState({ ...this.state, dataId }, { noRender: true });\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"detail__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const dataId = this.state?.dataId;\n    new DetailPageContent(\".detail__page\", { dataId });\n    new DetailPageBottomBar(\".detail__page\", { dataId });\n  }\n}\nexport default DetailPage;\n","import { EditPageBottomBar, EditPageContent } from \"@src/compositions\";\nimport { Component } from \"@src/core\";\nimport { editPublisher, mainPublisher, initMainState } from \"@src/core/PubSub\";\n\nclass EditPage extends Component {\n  protected initSubscriber(): void {\n    this.registerSubscriberFunction(mainPublisher, () => {\n      const { currKeys } = mainPublisher.recentChangedKeys;\n      if (currKeys.includes(\"editId\")) this.registerEditData();\n    });\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"edit__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const { editData } = editPublisher.state;\n    new EditPageContent(\".edit__page\", { editData });\n    new EditPageBottomBar(\".edit__page\");\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  // ------\n\n  // [2] Events\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  /** 전역에서 editId가 업데이트 되었을 시 작동, 데이터 가져옴 (this.state, editPublisher.state에 확정) */\n  private registerEditData(): void {\n    const { editId, postData } = mainPublisher.state;\n    if (editId === -1) return;\n    const editData = postData.find(({ id }) => editId === id);\n    if (!editData) return;\n\n    editPublisher.setState({ ...editPublisher.state, editData });\n    this.setState({ ...this.state, editData }, { isSetEvents: false });\n  }\n  // ------\n}\nexport default EditPage;\n","import { MainPageBoard, MainPageTopBar } from \"@src/compositions\";\nimport { Component } from \"@src/core\";\nimport \"./style.scss\";\n\nclass MainPage extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"main__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n  protected setChildren(): void {\n    new MainPageTopBar(\".main__page\");\n    new MainPageBoard(\".main__page\");\n  }\n}\nexport default MainPage;\n","import { Component, RouterLink } from \"@src/core\";\nimport { Span } from \"@src/components\";\nimport \"./style.scss\";\nimport { MainPage } from \"..\";\n\nclass NotFoundPage extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"not-found__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n  protected setChildren(): void {\n    new Span(\".not-found__page\", { text: `페이지를 찾을 수 없습니다.`, fontSize: 36, isBold: true });\n    new RouterLink(\".not-found__page\", {\n      text: \"메인으로\",\n      isButton: true,\n      href: \"/\",\n      componentInfo: { Component: MainPage },\n    });\n  }\n}\nexport default NotFoundPage;\n","import { DetailPage, EditPage, MainPage, NotFoundPage } from \"@src/pages\";\nimport { TargetType, ComponentItemType } from \"../Component\";\nimport { Publisher } from \"../PubSub\";\nimport CustomError from \"../CustomError\";\nimport { RouterInfo } from \".\";\n\ninterface PathProps {\n  publisherList?: Publisher[];\n  calledComponentName?: string;\n}\n\ninterface RenderPathProps extends PathProps {\n  href?: string;\n  componentInfo?: ComponentItemType;\n}\n\n/** ✨ renderPath: 주어진 href와 componentInfo의 정보를 활용하여 렌더링\n *  - 아무런 값이 없다면 기본 값은 notFound 페이지로 이동하며 렌더링\n *    - href가 없다면 기본값은 '/notFound'\n *    - componentInfo가 없다면 Component의 기본값은 NotFoundPage 컴포넌트\n */\nexport function renderPath({ componentInfo, href, calledComponentName, publisherList }: RenderPathProps = {}): void {\n  try {\n    if (!href) href = new URL(window.location.href).origin + \"/notFound\";\n    window.history.pushState({ href }, \"\", href);\n\n    const $root = document.querySelector(\"#root\");\n    const info: ComponentItemType = componentInfo ?? {\n      $target: $root,\n      Component: NotFoundPage,\n    };\n    if (!info.$target) info.$target = $root;\n\n    let { $target, Component: PageComponent, props } = info;\n    if (typeof $target === \"string\") $target = document.querySelector($target);\n    if (!$target) throw new CustomError({ msgType: \"NOT_FOUND_TARGET\", name: calledComponentName ?? \"unknown\" });\n    $target.innerHTML = \"\";\n\n    if (publisherList) publisherList.forEach((pub) => pub.clear());\n    new PageComponent($target, props);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\ninterface RenderRouterPathProps extends PathProps {\n  href: string;\n  routerInfo: RouterInfo;\n}\n\n/** ✨ renderRouterPath: 현재 path를 기반으로 routerInfo에서 페이지 컴포넌트 정보를 불러와서 렌더링 */\nexport function renderRouterPath({\n  routerInfo,\n  href,\n  calledComponentName,\n  publisherList,\n}: RenderRouterPathProps): void {\n  try {\n    if (!routerInfo) throw new CustomError({ msgType: \"NOT_FOUND_ROUTER_INFO\", name: calledComponentName });\n    const { pathname } = new URL(href);\n    const info = routerInfo[pathname] ?? routerInfo[\"/notFound\"];\n\n    const { Component: PageComponent, props } = info;\n    let $target = info.$target;\n\n    if (typeof $target === \"string\") $target = document.querySelector($target);\n    if (!$target) return;\n    $target.innerHTML = \"\";\n\n    if (publisherList) publisherList.forEach((pub) => pub.clear()); // Publisher 초기화\n    new PageComponent($target, props);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** ✨ createRouterInfo: 이 애플리케이션에서 쓸 페이지 정보 생성 */\nexport function createRouterInfo($target: TargetType = document.querySelector(\"#root\")): RouterInfo {\n  const routerInfo: RouterInfo = {\n    \"/\": { $target, Component: MainPage },\n    \"/detail\": { $target, Component: DetailPage },\n    \"/edit\": { $target, Component: EditPage },\n    \"/write\": { $target, Component: EditPage },\n    \"/notFound\": { $target, Component: NotFoundPage },\n  };\n  return routerInfo;\n}\n\ninterface QueryStringDetail {\n  key?: string;\n  value?: string;\n}\n\n/** ✨ createQueryStrings: 쿼리스트링 분석하여 객체로 반환  */\nexport const createQueryStrings = (queryString: string): QueryStringDetail[] | null => {\n  try {\n    const regEx = /(?<key>[\\w]+)=(?<value>[\\w]+)/g;\n    const arrMatchs = Array.from(queryString.matchAll(regEx)) ?? [];\n    if (!arrMatchs || !arrMatchs.length) return null;\n    return arrMatchs.map((v) => v.groups) as QueryStringDetail[];\n  } catch (e) {\n    return null;\n  }\n};\n","import Component, { Props, TargetType, ComponentItemType } from \"../Component\";\nimport { renderPath } from \"../Router\";\nimport { Publisher } from \"../PubSub\";\nimport \"./style.scss\";\n\ntype DefaultLinkProps = Pick<HTMLAnchorElement, \"href\" | \"text\"> & Partial<Pick<HTMLAnchorElement, \"name\">>;\nexport interface RouterLinkProps<T = unknown> extends Props, DefaultLinkProps {\n  componentInfo: ComponentItemType;\n  isButton?: boolean;\n  publisherList?: Publisher[];\n  callbackOption?: {\n    func: () => Promise<T> | T;\n    runPosition: \"beforeRenderPath\" | \"afterRenderPath\";\n    options?: { isID: boolean };\n  };\n}\n\n/**\n * [RouterLink]\n * - a 태그를 통한 페이지 이동 컴포넌트 (Component 상속 & Router 일부 사용)\n */\nclass RouterLink extends Component<{}, RouterLinkProps> {\n  constructor(protected readonly $target: TargetType, protected props: RouterLinkProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    if (!this.props) return \"\";\n    const { componentId, props } = this;\n    const { text, isButton } = props;\n\n    const excludeStrs = [\"routerInfo\", \"publisherList\", \"isButton\", \"callbackOption\", \"text\"];\n    const strAttrs = this.createStringAttribute(...excludeStrs);\n    const strClassName = `${isButton ? \" btn\" : \"\"}`;\n\n    return `<a class=\"app-link ${strClassName}\" ${strAttrs} data-component-id=${componentId}>${text ?? \"\"}</a>`;\n  }\n  protected setEvents(): void {\n    this.registerAnchorClick();\n  }\n\n  // =====\n\n  private registerAnchorClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.anchorClickHandler(e));\n  }\n\n  private async anchorClickHandler(e?: MouseEvent | Event): Promise<void> {\n    e?.preventDefault();\n    const $target = e?.target as HTMLElement;\n    const $currentTarget = e?.currentTarget as HTMLAnchorElement;\n    if (!$currentTarget || $target !== $currentTarget) return;\n    let href = $currentTarget.href;\n    if (!href) return;\n\n    const { callbackOption: cb } = this.props;\n    if (cb?.func && cb.runPosition === \"beforeRenderPath\") {\n      const execFunc = await cb.func();\n\n      const isBooleanFunc = typeof execFunc === \"boolean\";\n      if (isBooleanFunc && !execFunc) return;\n\n      if (cb.options?.isID) {\n        const isNumberFunc = typeof execFunc === \"number\";\n        if (isNumberFunc && execFunc === -1) return;\n        href += `?id=${execFunc}`;\n      }\n    }\n\n    const { componentInfo, publisherList } = this.props;\n    const calledComponentName = `${this.constructor.name}(${this.componentId})`;\n    renderPath({ componentInfo, href, calledComponentName, publisherList });\n    if (cb?.func && cb.runPosition === \"afterRenderPath\") cb.func();\n  }\n}\n\nexport default RouterLink;\n","import App from \"./App\";\nimport \"./index.scss\";\n\nnew App(\"#root\");","import { Component, Router, PathChangeOption, createRouterInfo, TargetType } from \"@src/core\";\nimport { editPublisher, initEditState, initMainState, mainPublisher } from \"./core/PubSub\";\n\nclass App extends Component {\n  constructor($root: TargetType) {\n    super($root);\n  }\n  protected init(): void {\n    this.setAppRouter();\n  }\n\n  private setAppRouter(): void {\n    if (!this.$target || typeof this.$target === \"string\") return;\n    const publisherList = [mainPublisher, editPublisher];\n    const routerInfo = createRouterInfo();\n    const pathChangeOption: PathChangeOption = {\n      func: () => {\n        mainPublisher.setState({ ...mainPublisher.state, editId: initMainState.editId }, { notExec: true });\n        editPublisher.setState({ ...initEditState }, { notExec: true });\n      },\n      pathList: [\"/edit\"],\n      isIncludePath: false,\n    };\n    new Router(this.$target, { publisherList, routerInfo, pathChangeOption });\n  }\n}\nexport default App;\n","/**\n * [Router]\n * - App 컴포넌트에서 페이지 설정, 이전 & 다음페이지 기능\n * - 참고사항\n *    - a 태그를 통한 페이지 이동(pushState)은 src/core/RouterLink 컴포넌트 참고\n */\nimport CustomError from \"../CustomError\";\nimport { ComponentItemType } from \"../Component\";\nimport { renderRouterPath } from \"./functions\";\nimport { Publisher } from \"../PubSub\";\n\nexport * from \"./functions\";\n\nexport type RouterInfo = {\n  [key: string]: ComponentItemType;\n};\n\nexport interface PathChangeOption {\n  func: () => Promise<void> | void;\n  pathList: string[];\n  isIncludePath: boolean;\n}\n\nexport interface RouterProps {\n  readonly routerInfo: RouterInfo;\n  readonly publisherList: Publisher[];\n  readonly pathChangeOption?: PathChangeOption;\n}\n// ========\n\nclass Router {\n  constructor(readonly $target: Element | null, readonly props: RouterProps) {\n    try {\n      if ($target === null) throw new CustomError({ msgType: \"NOT_FOUND_TARGET\", name: this.constructor.name });\n      this.init();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * 👾 init\n   * - setPopStateEvent: 이전 페이지 & 다음 페이지 이벤트 설정\n   */\n  private init(): void {\n    this.setPopStateEvent();\n    this.setCleanUp();\n    const href = window.location.href;\n    const { publisherList, routerInfo } = this.props;\n    const calledComponentName = this.constructor.name;\n    renderRouterPath({ href, calledComponentName, routerInfo, publisherList });\n  }\n\n  /** 보고있는 페이지의 이동이 이뤄질 경우, pathChangeOption.func() 실행 */\n  private setCleanUp(): void {\n    const { pathChangeOption } = this.props;\n    if (!pathChangeOption || !this.$target) return;\n    const { func, pathList, isIncludePath } = pathChangeOption;\n\n    const observer = new MutationObserver(async (_) => {\n      const pathname = new URL(document.location.href).pathname;\n      const flag = isIncludePath ? pathList.includes(pathname) : !pathList.includes(pathname);\n      if (flag) await func();\n    });\n    const config = { childList: true, subtree: true };\n    observer.observe(this.$target, config);\n  }\n  private setPopStateEvent(): void {\n    window.addEventListener(\"popstate\", () => this.popStateEventHandler());\n  }\n  private popStateEventHandler(e?: PopStateEvent): void {\n    const href = window.location.href;\n    const { publisherList, routerInfo } = this.props;\n    const calledComponentName = this.constructor.name;\n    renderRouterPath({ href, calledComponentName, routerInfo, publisherList });\n  }\n}\n\nexport default Router;\n"],"names":["errorMessage","NOT_FOUND_TARGET","NOT_FOUND_ROUTER_INFO","RESPONSE_IS_NULL","CustomError","Error","constructor","msgType","customMessage","name","super","initState","setStateCallback","_notExec","_recentChangedKeys","prevKeys","currKeys","largeKeySet","Set","_observers","this","_state","_prevState","state","recentChangedKeys","newState","updateRecentChangedKeys","exec","setState","options","notExec","forEach","func","add","remove","delete","clear","clearLargeKeySet","Object","values","every","arrValue","length","getRecentKeys","v","arrState","entries","arrPrevState","result","i","key","value","prevKey","prevValue","JSON","stringify","push","getParseLocalItem","strItem","localStorage","getItem","getLocalItem","parse","setConvertLocalItem","setItem","setLocalItem","execFetch","type","url","id","END_POINT","currType","createURL","res","fetch","status","json","e","console","error","message","getAllPostData","data","arrPosts","post","createdDate","Date","sort","a","b","initMainState","postData","editId","isInit","isRefresh","filterOptions","author","searchWord","isDesc","undefined","numPost","pageNum","numPostList","LOCAL_MAIN_KEY","mainPublisher","getLocalMainPublisherState","createPostData","isFullData","funcs","reduce","currData","pipe","arrPostData","filter","createAuthorFilterItems","replacedSearchword","replace","subject","indexOf","createSearchFilterItems","valueOf","createDateSortItems","max","Math","ceil","startIdx","endIdx","slice","createNumPostItems","initEditState","editData","contents","isEdited","LOCAL_EDIT_KEY","editPublisher","pathname","URL","window","location","href","mainLocalState","isNeedReset","removeItem","isResetEditLocalState","getLocalEditPublisherState","getRandomNumber","min","floor","random","createNodes","originEle","Array","from","childNodes","updateNodes","prevNodes","newNodes","isNeedFixNodes","MAX_LENGTH","idx","newNode","findIndex","prevNode","isSameNodeName","nodeName","isAllElement","HTMLElement","prevId","dataset","componentId","newId","fixedNewNodes","execDifferentCheck","execAttributesCheck","prevChildren","newChildren","isRemove","isAppend","removeChild","appendChild","isNotSameType","isDiffText","node","Text","nodeValue","replaceChild","Element","newAttrs","attributes","prevAttrs","find","prevName","setAttribute","newName","removeAttribute","defaultPropsKeys","$target","props","_renderState","startCode","endCode","charCodeAt","Boolean","round","String","fromCharCode","makeComponentId","document","querySelector","init","initSubscriber","render","registerSubscriberFunction","publisher","_subscriber","registerFunc","removeFunc","noRender","isSetEvents","setBeforeRender","isNotKeepAdding","initInsertPosition","insertPosition","insertAdjacentHTML","setTemplate","updateComponentNodes","setChildren","setEvents","strTemplate","tempEle","createElement","innerHTML","createTemplateNodes","getEventTarget","$result","createStringAttribute","excludeStrs","arrExclude","includes","arrHeadKeyName","keys","strData","createTDStrings","map","txt","width","join","str","$tdSubject","text","componentInfo","Component","publisherList","strTds","isSubject","toLocaleDateString","color","size","createLiItemStrings","REMAINDER","items","nIdx","strClassName","strLastItem","selectedValue","isBold","fontSize","isFullSize","showButtons","noticeText","buttonTexts","btnsSelector","cancel","confirm","registerButtonsClick","addEventListener","handleButtonsClick","target","closest","clickHandler","handleConfirmClick","handleCancelClick","commonLinkProps","isButton","dataId","callbackOption","runPosition","setDetailBottomModal","registerDetailBottomBarClick","errMessage","deleteStatus","modalProps","createDeleteModalProps","renderPath","setInitDeleteStatus","requestDeleteData","handleDetailBottomBarClick","classList","contains","HTMLButtonElement","method","body","headers","statusCode","postDataKorKeys","requiredPostDataKeys","setPostData","textInfoStrings","createPostDataStrings","textInfoItems","toLocaleString","routerLinkProps","regsiterEditData","isID","registerEditBottomBarClick","handleEditBottomBarClick","history","back","notEmptyCnt","isEdit","requestCreateData","toUpperCase","createEditInfoStrings","placeholder","registerEditContentsKeyup","handleEditContentsKeyup","isTextarea","createRouterInfo","createSelector","registerMainTopBarClick","registerMainTopBarKeyUp","registerMainTopBarChange","handleMainTopBarClick","buttonName","initMainTopBarElements","refrashPostData","$searchInput","$selectbox","latestPostdata","handleMainTopBarKeyUp","prevFilterOptions","handleMainTopBarChange","Number","isNaN","initGetAllPostData","isUpdate","execInitMainPageBoard","execUpdateMainPageBoard","pageOnlyPostData","registerMainBoardClick","handleMainBoardClick","$board","$pagination","isCreatedDate","isAuthor","textContent","execCreatedDateClick","execAuthorClick","execPaginationItemClick","$li","isPrevNext","prevNum","tmpPageNum","search","createQueryStrings","registerEditData","calledComponentName","origin","pushState","$root","info","PageComponent","pub","renderRouterPath","routerInfo","queryString","regEx","arrMatchs","matchAll","groups","registerAnchorClick","anchorClickHandler","preventDefault","$currentTarget","currentTarget","cb","execFunc","setAppRouter","pathChangeOption","pathList","isIncludePath","setPopStateEvent","setCleanUp","MutationObserver","_","observe","childList","subtree","popStateEventHandler"],"sourceRoot":""}